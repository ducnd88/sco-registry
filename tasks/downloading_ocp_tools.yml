---

- name: Get stat of OCP client tool tar
  stat:
    path: "./{{ ocp_client_tar }}"
  register: ocp_client_stat

- name: Download OCP client tool tar
  vars:
    get_url_timeout: 50
  get_url:
    url: "{{ ocp_source_url }}/{{ ocp_client_tar }}"
    dest: "./{{ ocp_client_tar }}"
    mode: '0644'
    force: 'no'
    timeout: '{{ get_url_timeout }}'
  register: ret_client
  until: not ret_client.failed
  retries: 2
  when: not ocp_client_stat.stat.exists

- name: Get stat of OCP installer tool tar
  stat:
    path: "./{{ ocp_installer_tar }}"
  register: ocp_installer_stat

- name: Download OCP installer tool tar
  vars:
    get_url_timeout: 100
  get_url:
    url: "{{ ocp_source_url }}/{{ ocp_installer_tar }}"
    dest: "./{{ ocp_installer_tar }}"
    mode: '0644'
    force: 'no'
    timeout: '{{ get_url_timeout }}'
  register: ret_installer
  until: not ret_installer.failed
  retries: 2
  when: not ocp_installer_stat.stat.exists

- name: Get stat of RHCOS iso
  stat:
    path: "./{{ rhcos_iso }}"
  register: rhcos_iso_stat

- name: Download RHCOS iso
  vars:
    get_url_timeout: 180
  get_url:
    url: "{{ rhcos_url }}/{{ rhcos_iso }}"
    dest: "./{{ rhcos_iso }}"
    mode: '0644'
    force: 'no'
    timeout: '{{ get_url_timeout }}'
  when: iso_download is defined and not rhcos_iso_stat.stat.exists
  register: ret_dn_rhcos

- name: Extract OCP client tool tar
  unarchive:
    src: './{{ ocp_client_tar }}'
    dest: '/usr/local/bin'
    remote_src: yes
    creates: /usr/local/bin/kubectl
  when: ocp_client_stat.stat.exists or not ret_client.failed

- name: Extract OCP installer tool tar
  unarchive:
    src: './{{ ocp_installer_tar }}'
    dest: '/usr/local/bin'
    remote_src: yes
    creates: /usr/local/bin/openshift-install
  when: ocp_installer_stat.stat.exists or not ret_installer.failed
